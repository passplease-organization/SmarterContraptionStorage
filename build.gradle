buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath("net.neoforged.moddev.legacyforge:net.neoforged.moddev.legacyforge.gradle.plugin:2.0.84")
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id "net.neoforged.moddev.legacyforge" version "2.0.84"
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

boolean ponderInWorkspace = rootProject.hasProperty('multiModWorkspace.ponder')
def GameTestConfig = project.properties.get('GameTestConfig','default')

legacyForge {
    version = "$minecraft_version-$forge_version"
    accessTransformers.from ATFile
    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
    mods {
        create {
            sourceSet sourceSets.main
        }

        if (ponderInWorkspace) {
            ponder {
                sourceSet project(":ponder:Common").sourceSets.main
                sourceSet project(":ponder:Forge").sourceSets.main
            }
        }
    }
    runs {
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]
            //jvmArgs("-XX:-OmitStackTraceInFastThrow") // uncomment when you get exceptions with null messages etc
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'

            programArgument '-mixin.config=smartercontraptionstorage.mixins.json'
        }

        client {
            client()
            gameDirectory = project.file('run')
        }

        server {
            server()
            gameDirectory = project.file('run/server')
        }

        gameTestServer {
            type = "gameTestServer"

            if(GameTestConfig != 'default')
                gameDirectory = project.file("run/gametest/${GameTestConfig}")
            else gameDirectory = project.file('run/gametest')
        }

        data {
            data()

            gameDirectory = project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", mod_id as String, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources").getAbsolutePath())
        }
    }
}

mixin {
    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
tasks.named('compileJava'){
    doFirst {
        if(project.gradle.startParameter.taskNames.contains('build'))
            compileJava.source = compileJava.source.filter {
                File file -> !file.name.endsWith('BuildNBTFile.java')
            }
    }
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    google()

    maven { url = "https://maven.createmod.net" } // Ponder, Flywheel
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://www.cursemaven.com" }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    gradlePluginPortal()
    mavenCentral()
}
dependencies {
    modImplementation("curse.maven:create-328085:6323270")
    if (ponderInWorkspace) {
        implementation project(":ponder:Common")
        implementation project(":ponder:Forge")
    } else {
        modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    }
    modImplementation(jarJar("com.tterrag.registrate:Registrate:${registrate_version}"))
    jarJar("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")

    modImplementation("curse.maven:storage-drawers-223852:6549483")
    modImplementation("curse.maven:trash-cans-394535:4712179")
    modImplementation("curse.maven:supermartijn642s-config-lib-438332:4715408")
    modImplementation("curse.maven:supermartijn642s-core-lib-454372:5102258")
    modImplementation("curse.maven:sophisticated-core-618298:5326245")
    modImplementation("curse.maven:sophisticated-backpacks-422301:5296475")
    modImplementation("curse.maven:functional-storage-556861:5169765")
    modImplementation("curse.maven:titanium-287342:5468426")
    modImplementation("curse.maven:applied-energistics-2-223794:5565729")
    modImplementation("curse.maven:cobblefordays-349460:4653625")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly 'org.jetbrains:annotations:24.1.0'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.register("prepareGameTestConfigs", Copy) {
    group = 'mod development'
    description = "Copy config files for GameTestServer"
    if(GameTestConfig != 'default') {
        def configFiles = project.file(GameTestConfigDir)
        if (!configFiles.exists() || !configFiles.isDirectory()) {
            throw new GradleException("config set directory '${configFiles}' does not exist for GameTestServer. ")
        }
        from fileTree("${configFiles}/${GameTestConfig}")
        into runGameTestServer.gameDirectory.file('config')
    }
}

tasks.named('runGameTestServer', JavaExec){
    dependsOn prepareGameTestConfigs
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}